(define (expmod base exp m)
    (cond
        ((= exp 0) 1)
        ((even? exp) 
            (remainder 
                (square (expmod base (/ exp 2) m))
                m))
        (else 
            (remainder 
                (* base (expmod base (- exp 1) m))
                m))))
(define (fermat_test n)
    (define (try_it a)
        (= (expmod a n n) a))
    (try_it (+ 1 (random (- n 1)))))
(define (fast_prime? n times)
    (cond
        ((= times 0) true)
        ((fermat_test n) (fast_prime? n (- times 1)))
        (else false)))
(define (prime? n)
    (fast_prime? n 100))
(define (timed_prime_test n)
  (newline)
  (display n)
  (start_prime_test n (runtime)))
(define (start_prime_test n start_time)
  (if (prime? n)
      (report_prime (- (runtime) start_time))))
(define (report_prime elapsed_time)
  (display " *** ")
  (display elapsed_time))
(define (search_for_primes lower upper)
    (define (test_iter n)
        (cond ((<= n upper)
            (timed_prime_test n)
            (test_iter (+ n 2)))))
    (test_iter (if (odd? lower) lower (+ lower 1))))

; (search_for_primes 1000 1019)
; (search_for_primes 10000 10037)
; (search_for_primes 100000 100043)
; (search_for_primes 1000000 1000037)
; (search_for_primes 1000000000 1000000021)
; (search_for_primes 10000000000 10000000061)
; (search_for_primes 100000000000 100000000057)
(search_for_primes 1000000000000 1000000000063)