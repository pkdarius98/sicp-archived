(define (prime? n)
    (define (next test)
        (if (= 2 test)
            3
            (+ test 2)))
    (define (square a)
        (* a a))
    (define (divides? a b)
        (= (remainder b a) 0))
    (define (find_divisor n test_divisor)
        (cond 
            ((> (square test_divisor) n) n)
            ((divides? test_divisor n) test_divisor)
            (else (find_divisor n (next test_divisor)))))
    (define (smallest_divisor n)
        (find_divisor n 2))
    (= n (smallest_divisor n)))
(define (timed_prime_test n)
  (newline)
  (display n)
  (start_prime_test n (runtime)))
(define (start_prime_test n start_time)
  (if (prime? n)
      (report_prime (- (runtime) start_time))))
(define (report_prime elapsed_time)
  (display " *** ")
  (display elapsed_time))
(define (search_for_primes lower upper)
    (define (test_iter n)
        (cond ((<= n upper)
            (timed_prime_test n)
            (test_iter (+ n 2)))))
    (test_iter (if (odd? lower) lower (+ lower 1))))

; (search_for_primes 1000 1019)
; (search_for_primes 10000 10037)
; (search_for_primes 100000 100043)
; (search_for_primes 1000000 1000037)
; (search_for_primes 1000000000 1000000021)
; (search_for_primes 10000000000 10000000061)
; (search_for_primes 100000000000 100000000057)
(search_for_primes 1000000000000 1000000000063)