(define (deriv g)
    (let ((dx 0.0000001))
        (lambda (x)
            (/ (- (g (+ x dx)) (g x)) dx))))
(define (fixed_point f first_guess)
    (define tolerance 0.0000000000001)
    (define (close_enough? x y)
        (< (abs (- x y)) tolerance))
    (define (try guess)
        (let ((next (f guess)))
            (if (close_enough? guess next)
                next
                (try next))))
    (try first_guess))
(define (newtons_method g guess)
    (define (newton_transform g)
        (lambda (x)
            (- x (/ (g x) ((deriv g) x)))))
    (fixed_point (newton_transform g) guess))
(define (cubic a b c)
    (lambda (x) (+ (cube x) (* a (square x)) (* b x) c)))
(newtons_method (cubic 1 2 3) 1)