(define (add_complex z1 z2)
    (make_from_real_imag
        (+ (real_part z1) (real_part z2))
        (+ (imag_part z1) (imag_part z2))))
(define (sub_complex z1 z2)
    (make_from_real_imag
        (- (real_part z1) (real_part z2))
        (- (imag_part z1) (imag_part z2))))
(define (mul_complex z1 z2)
    (make_from_mag_ang
        (* (magnitude z1) (magnitude z2))
        (+ (angle z1) (angle z2))))
(define (div_complex z1 z2)
    (make_from_mag_ang
        (/ (magnitude z1) (magnitude z2))
        (- (angle z1) (angle z2))))
;;
(define (attach_tag type_tag contents)
    (cons type_tag contents))
(define (type_tag datum)
    (if (pair? datum)
        (car datum)
        (error "Bad tagged datum: TYPE_TAG" datum)))
(define (contents datum)
    (if (pair? datum)
        (cdr datum)
        (error "Bad tagged datum: CONTENTS" datum)))
;;
(define (make_from_real_imag x y)
    (make_from_real_imag_rectangular x y))
(define (make_from_mag_ang r a)
    (make_from_mag_ang_polar r a))

(define (install_rectangular_package)
    (define (real_part z) (car z))
    (define (imag_part z) (cdr z))
    (define (make_from_real_imag x y)
        (cons x y))
    (define (magnitude z)
        (sqrt (+ (square (real_part z)))
                (square (imag_part z))))
    (define (angle z)
        (atan (imag_part z) (real_part z)))
    (define (make_from_mag_ang x y)
        (cons (* r (cos a)) (* r (sin a))))
    (define (tag x)
        (attach_tag 'rectangular x))
    (put 'real_part '(rectangular) real_part)
    (put 'imag_part '(rectangular) imag_part)
    (put 'magnitude '(rectangular) magnitude)
    (put 'angle '(rectangular) angle)
    (put 'make_from_real_imag 'rectangular
        (lambda (x y)
            (tag (make_from_real_imag x y))))
    (put 'make_from_mag_ang 'rectangular
        (lambda (r a)
            (tag (make_from_mag_ang r a))))
    'done)
(define (install_polar_package)
    (define (magnitude z) (car z))
    (define (angle z) (cdr z))
    (define (make_from_mag_ang r a)
        (cons r a))
    (define (real_part z)
        (* (magnitude z) (cos (angle z))))
    (define (imag_part z)
        (* (magnitude z) (sin (angle z))))
    (define (make_from_real_imag x y)
        (cons (sqrt (+ (square x) (square y)))
              (atan y x)))
    (define (tag x)
        (attach_tag 'polar x))
    (put 'real_part '(polar) real_part)
    (put 'imag_part '(polar) imag_part)
    (put 'magnitude '(polar) magnitude)
    (put 'angle '(polar) angle)
    (put 'make_from_real_imag 'polar
        (lambda (x y)
            (tag (make_from_real_imag x y))))
    (put 'make_from_mag_ang 'polar
        (lambda (r a)
            (tag (make_from_mag_ang r a))))
    'done)
(define (apply_generic op . args)
    (let ((type_tags (map type_tag args)))
        (let ((proc (get op type_tags)))
            (if proc
                (apply proc (map contents args))
                (error "No method for these types: APPLY_GENERIC" (list op type_tags))))))
;;
(define (real_part z)
    (apply_generic 'real_part z))
(define (imag-part z) 
    (apply_generic 'imag_part z))
(define (magnitude z) 
    (apply_generic 'magnitude z))
(define (angle z) 
    (apply_generic 'angle z))
;;
(define (make_from_real_imag x  y)
    ((get 'make_from_real_imag 'rectangular) x y))
(define (make_from_mag_ang r a)
    ((get 'make_from_mag_ang 'polar) r a))
;;
