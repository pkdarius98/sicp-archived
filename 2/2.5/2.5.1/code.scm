(define (add x y) (apply_generic 'add x y))
(define (sub x y) (apply_generic 'sub x y))
(define (mul x y) (apply_generic 'mul x y))
(define (div x y) (apply_generic 'div x y))

(define (install_scheme_number_package)
    (define (tag x)
        (attach_tag 'scheme_number x))
    (put 'add '(scheme_number scheme_number)
        (lambda (x y) (tag (+ x y))))
    (put 'sub '(scheme_number scheme_number)
        (lambda (x y) (tag (- x y))))
    (put 'mul '(scheme_number scheme_number)
        (lambda (x y) (tag (* x y))))
    (put 'div '(scheme_number scheme_number)
        (lambda (x y) (tag (/ x y))))
    (put 'make 'scheme_number
        (lambda (x) (tag x)))
    'done)

(define (install_rational_package)
    (define (number x) (car x))
    (define (denom x) (cdr x))
    (define (make_rat n d)
        (let ((g (gcd n d)))
            (cons (/ n g) (/ d g))))
    (define (add_rat x y)
    (make_rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x)))
              (* (denom x) (denom y))))
    (define (sub_rat x y)
        (make_rat (- (* (numer x) (denom y))
                     (* (numer y) (denom x)))
                  (* (denom x) (denom y))))
    (define (mul_rat x y)
        (make_rat (* (numer x) (numer y))
                  (* (denom x) (denom y))))
    (define (div_rat x y)
        (make_rat (* (numer x) (denom y))
                  (* (denom x) (numer y))))
    (define (tag x) (attach_tag 'rational x))
    (put 'add '(rational rational)
        (lambda (x y) (tag (add_rat x y))))
    (put 'sub '(rational rational)
        (lambda (x y) (tag (sub_rat x y))))
    (put 'mul '(rational rational)
        (lambda (x y) (tag (mul_rat x y))))
    (put 'div '(rational rational)
        (lambda (x y) (tag (div_rat x y))))
    (put 'make 'rational
        (lambda (n d) (tag (make_rat n d))))
  'done)