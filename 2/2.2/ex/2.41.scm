(define (ordered_triples n s) ;; ordered less than or equal n, sum less than or equal s
    (flatmap (lambda (i)
            (flatmap (lambda (j)
                    (map (lambda (k)
                        (list k j i))
                        (enumerate_interval 1 (- s (+ i j)))))
                 (enumerate_interval 1 (- i 1))))
         (enumerate_interval 1 n)))
(define (ordered_triples n s) ;; ordered less than or equal n, sum equal s
    (filter (lambda (p) (= s (+ (car p) (car (cdr p)) (car (cdr (cdr p)))))) 
            (flatmap (lambda (i)
                (flatmap (lambda (j)
                            (map (lambda (k)
                                    (list k j i))
                                (filter (lambda (k) (< k j)) 
                                        (enumerate_interval 1 (- s (+ i j))))))
                        (enumerate_interval 1 (- i 1))))
                (enumerate_interval 1 n))))
(ordered_triples 10 10)