(define (random_in_range low high)
    (let ((range (- high low)))
        (+ low (random range))))
(define (test p x1 x2 y1 y2)
    (lambda () 
        (let ((a (random_in_range x1 x2))
              (b (random_in_range y1 y2)))
            (let ((c (p a b))
                  (d (square (/ (- x2 x1) 2))))
                ; (newline)(display a)(display " ")(display b)(display " ")(display c)(display " ")(display d)(display " ")
                (<= c d)))))
(define (estimate_integral p x1 x2 y1 y2 trials)
    (* 4 (monte_carlo trials (test p x1 x2 y1 y2))))
(define (monte_carlo trials experiment)
    (define (iter trials_remaining trials_passed)
        (cond ((= trials_remaining 0) (/ trials_passed trials))
              ((experiment) (iter (- trials_remaining 1)
                                  (+ trials_passed 1)))
              (else (iter (- trials_remaining 1) trials_passed))))
    (iter trials 0.0))
(estimate_integral (lambda (x y) (+ (square (- x 5.0)) (square (- y 7.0)))) 2.0 8.0 4.0 10.0 10000)
