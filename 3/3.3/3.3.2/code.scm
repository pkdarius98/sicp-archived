(define (front_ptr queue) (car queue))
(define (rear_ptr queue) (cdr queue))
(define (set_front_ptr! queue item)
    (set-car! queue item))
(define (set_rear_ptr! queue item)
    (set-cdr! queue item))
(define (empty_queue? queue)
    (null? (front_ptr queue)))
(define (make_queue) (cons '() '()))

(define (front_queue queue)
    (if (empty_queue? queue)
        (error "FRONT called with an empty queue" queue)
        (car (front_ptr queue))))
(define (insert_queue! queue item)
    (let ((new_pair (cons item '())))
        (cond ((empty_queue? queue)
                    (set_front_ptr! queue new_pair)
                    (set_rear_ptr! queue new_pair)
                    queue)
              (else (set-cdr! (rear_ptr queue) new_pair)
                    (set_rear_ptr! queue new_pair)
                    queue))))
(define (delete_queue! queue)
    (cond ((empty_queue? queue)
                (error "DELETE! called with an empty queue" queue))
          (else (set_front_ptr! queue (cdr (front_ptr queue)))
                queue)))

(define (print_queue queue)
    (newline)
    (define (iter item)
        (if (not (null? item))
            (begin (display (car item))(display " ")
            (iter (cdr item)))))
    (iter (front_ptr queue)))

(define q1 (make_queue))
(print_queue q1)
(insert_queue! q1 'a)
(print_queue q1)
(insert_queue! q1 'b)
(print_queue q1)
(delete_queue! q1)
(print_queue q1)
(delete_queue! q1)
(print_queue q1)